<!--如果有多个model只能识别最后一个-->
@model _01_MVCBasic.Models.Person
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>HtmlTest</title>
</head>
<body>
    <div>
        <!--硬件编码，路由规则改变后链接地址将失效-->
        <a href="/home/index">超链接1</a>
        <br />
        <!--根据路由规则生成链接地址-->
        <a href="@Url.Action("HtmlTest", "Home")">超链接2</a>
        <!--HtmlHelper,快速搭建View-->
        @Html.ActionLink("超链接", "HtmlTest", "Home1");
        @Html.Raw("Raw");<!--在特定位置输出一个常量-->
        <hr />
        @{
            var temp1 = "<b>123</b>";
        }
        @Html.Encode(temp1);<!--对html标签进行编码再输出到页面-->
        <!--搭建表单,根据路由方式生成地址-->
        @using (Html.BeginForm("Show", "Home", FormMethod.Post))
        {
            @Html.TextBox("uName");
            <input type="button" name="name" value="" /><!--Html中没有封装的这么写-->
            <input type="submit" name="name" value="" />
        }
        @ViewBag.QQ
        @ViewData["QQ"]
        @ViewBag.Tencent
        @ViewData["Tencent"]
        <br /><hr />
        生成下拉列表
        @Html.DropDownList("ddlList")<!--生成下拉列表-->

        <br /><hr />
        页面强类型
        @Html.TextBoxFor(c => c.Name)<!--通过model指定类型，在编辑阶段就检查创建的Html元素; 在Runtime再检查出的错误，成本太高-->
        @ViewData.Model<!--通过页面绑定model传递对象-->
    </div>
</body>
</html>
